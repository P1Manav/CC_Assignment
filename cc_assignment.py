# -*- coding: utf-8 -*-
"""CC_Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZK44yijuEKu2ch9uepwL8vD6wGpotzAB
"""

import librosa
import numpy as np
import os
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import tensorflow as tf
from sklearn.preprocessing import StandardScaler
from tensorflow.keras import layers, models
from tensorflow.keras.callbacks import EarlyStopping

from google.colab import drive
drive.mount('/content/drive')

def extract_features(audio_file):
    try:
        y, sr = librosa.load(audio_file, sr=None)

        # Extract MFCC features
        mfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)
        mfcc_means = np.mean(mfccs, axis=1)
        mfcc_vars = np.var(mfccs, axis=1)

        # LPC features (define an order)
        lpc_order = 12
        lpc_coeffs = librosa.lpc(y, order=lpc_order)

        # Calculate statistics for LPC features
        lpc_means = np.mean(lpc_coeffs)
        lpc_vars = np.var(lpc_coeffs)

        # Calculate statistics for LAR features
        lar_means = np.mean(np.abs(lpc_coeffs))
        lar_vars = np.var(np.abs(lpc_coeffs))

        # Calculate statistics for cepstral features
        cep_means = np.mean(mfcc_means)
        cep_vars = np.var(mfcc_means)

        return np.hstack([lpc_means, lpc_vars, lar_means, lar_vars, cep_means, cep_vars, mfcc_means, mfcc_vars])

    except Exception as e:
        print(f"Error processing file {audio_file}: {e}")
        return None

def load_data(parkinsons_folder, healthy_folder):
    parkinsons_features = []
    healthy_features = []

    # Process Parkinson's disease samples
    for file in os.listdir(parkinsons_folder):
        if file.endswith('.wav' or ".m4a"):
            audio_file = os.path.join(parkinsons_folder, file)
            feature_vector = extract_features(audio_file)
            if feature_vector is not None:
                parkinsons_features.append(feature_vector)

    # Process healthy samples
    for file in os.listdir(healthy_folder):
        if file.endswith('.wav' or ".m4a"):
            audio_file = os.path.join(healthy_folder, file)
            feature_vector = extract_features(audio_file)
            if feature_vector is not None:
                healthy_features.append(feature_vector)

    return np.array(parkinsons_features), np.array(healthy_features)

parkinsons_folder = '/content/drive/MyDrive/PD_AH'
healthy_folder = '/content/drive/MyDrive/HC_AH'

parkinsons_features, healthy_features = load_data(parkinsons_folder, healthy_folder)

# Ensure non-empty datasets
if len(parkinsons_features) == 0 or len(healthy_features) == 0:
    raise ValueError("No features were extracted. Check your audio files or feature extraction process.")

X_train_parkinsons, X_test_parkinsons = train_test_split(parkinsons_features, test_size=0.2, random_state=42)
X_train_healthy, X_test_healthy = train_test_split(healthy_features, test_size=0.2, random_state=42)

X_train = np.vstack([X_train_parkinsons, X_train_healthy])
y_train = np.hstack([np.ones(len(X_train_parkinsons)), np.zeros(len(X_train_healthy))])

X_test = np.vstack([X_test_parkinsons, X_test_healthy])
y_test = np.hstack([np.ones(len(X_test_parkinsons)), np.zeros(len(X_test_healthy))])

# Handle NaN and Inf values
X_train = np.nan_to_num(X_train, nan=np.nanmean(X_train, axis=0))
X_test = np.nan_to_num(X_test, nan=np.nanmean(X_test, axis=0))

X_train[np.isinf(X_train)] = np.nanmax(X_train[np.isfinite(X_train)])
X_test[np.isinf(X_test)] = np.nanmax(X_test[np.isfinite(X_test)])

# Feature Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

lr = LogisticRegression(max_iter=1000)
lr.fit(X_train_scaled, y_train)
y_pred_lr = lr.predict(X_test_scaled)
print("Logistic Regression Accuracy:", accuracy_score(y_test, y_pred_lr))
print("Logistic Regression Classification Report:\n", classification_report(y_test, y_pred_lr))

rf = RandomForestClassifier()
rf.fit(X_train_scaled, y_train)
y_pred_rf = rf.predict(X_test_scaled)
print("Random Forest Accuracy:", accuracy_score(y_test, y_pred_rf))
print("Random Forest Classification Report:\n", classification_report(y_test, y_pred_rf))

X_train_reshaped = np.expand_dims(X_train_scaled, axis=2)
X_test_reshaped = np.expand_dims(X_test_scaled, axis=2)

model = models.Sequential()
model.add(layers.Conv1D(32, 3, activation='relu', input_shape=(X_train_reshaped.shape[1], 1)))
model.add(layers.MaxPooling1D(2))
model.add(layers.Conv1D(64, 3, activation='relu'))
model.add(layers.MaxPooling1D(2))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dropout(0.5))
model.add(layers.Dense(1, activation='sigmoid'))

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
early_stopping = EarlyStopping(monitor='val_loss', patience=81)

model.fit(X_train_reshaped, y_train, epochs=50, batch_size=32, validation_split=0.2, callbacks=[early_stopping])

cnn_loss, cnn_accuracy = model.evaluate(X_test_reshaped, y_test)
print("CNN Accuracy:", cnn_accuracy)

import librosa
import numpy as np
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import load_model
import os

def predict_parkinson(audio_file, lr_model, rf_model, cnn_model, scaler):
    features = extract_features(audio_file)
    if features is None:
        print(f"Failed to extract features from {audio_file}")
        return

    # Step 1: Preprocess the features and scaling
    features = np.array(features).reshape(1, -1)
    features_scaled = scaler.transform(features)

    # Step 2: Make predictions using the Logistic Regression and Random Forest models
    lr_prediction = lr.predict(features_scaled)
    rf_prediction = rf_model.predict(features_scaled)

    # Step 3: Reshape for CNN input
    features_reshaped = np.expand_dims(features_scaled, axis=2)

    # Step 4: Make prediction using the CNN model
    cnn_prediction = cnn_model.predict(features_reshaped)

    print(f"Logistic Regression Prediction: {'Parkinson' if lr_prediction[0] == 1 else 'Healthy'}")
    print(f"Random Forest Prediction: {'Parkinson' if rf_prediction[0] == 1 else 'Healthy'}")
    print(f"CNN Prediction: {'Parkinson' if cnn_prediction[0] > 0.5 else 'Healthy'}")

    return {
        'Logistic Regression': 'Parkinson' if lr_prediction[0] == 1 else 'Healthy',
        'Random Forest': 'Parkinson' if rf_prediction[0] == 1 else 'Healthy',
        'CNN': 'Parkinson' if cnn_prediction[0] > 0.5 else 'Healthy'
    }


audio_file1 ='/content/pratham.m4a'
result1 = predict_parkinson(audio_file1, lr, rf, model, scaler)

print("Prediction Result:", result1)

import joblib
import tensorflow as tf

# Save sklearn models
joblib.dump(lr, 'lr_model.pkl')
joblib.dump(rf, 'rf_model.pkl')

# Save CNN model
model.save('cnn_model.keras')